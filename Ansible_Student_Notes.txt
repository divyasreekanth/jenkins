Ansible Student Notes:

Insta
1. Installation:

Redhat/Centos:

https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-centos-7

Amazon Image:

#pip install ansible

highlight-ansible-yaml-and-jinja-syntax-in-vim-editor ::


mkdir -p ~/.vim/autoload ~/.vim/bundle && curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim

Now add the following lines to vim ~/.vimrc to activate this and start autoloading bundles.

[root@slave1 ansible]# cat ~/.vimrc
execute pathogen#infect()
syntax on
filetype plugin indent on
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab


Now, download the bundles.

yum install git -y 
cd ~/.vim/bundle
git clone git://github.com/chase/vim-ansible-yaml.git
git clone https://github.com/lepture/vim-jinja.git


YAML Basics::

comments (#)
Variables
booleans
lists
dictionaries
multilines (> & !)
Dict of Dict

Examples For YML :

#Hello all this is the comment section


val1: 430

bool1: "Ture"

l1:
  - 1
  - 2
  - 3

l2: [1,2,3,4]


dict1: 
   - name: "n1"
   
dict2:
  - name: "dvs"
  - 1
  - 2
  - 3
  - place: "blr"
  - l1:
     - 1
     - 2
     - 3

  


https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg :-> Link of default anisble.cfg

Configuring ansible.cfg:

https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg :-> Link of default anisble.cfg

By default we will be having /etc/ansible/ansible.cfg file which contains all the defaults configuration but it will be in comments. we need to 
configure the things based up on our requirement.
             
* you can configure the things based up on your requirement. It means its not mandatory to use the base location i.e /etc/ansible as you parent directory. 

* you can configure any directory as your base directory but you need to convey the details to it like below.

# mkdir /ansible
#cd /ansible
[root@master ansible]# cat ansible.cfg
[defaults]
inventory= /ansible/hosts

#Configuring hosts file:
Testing using:

ansible -m command -a "uptime" all/group/clientname

Accessing servers inside parent directory and outside parent directory

What Exactly Happens in background:

1. Generate a python script 
2. Copy the script to respective servers
3. Execute the script on respective servers
4. Wait for the script to complete execution on all hosts

Its Important To note that:

1. Ansible runs each task in parallel across all hosts
2. Ansible waits until all hosts have completed a task befor moving to the next node
3. Ansible runs the tasks in the order that you specify them.

4. To manage a server with ansible, the server needs to have ssh & python 2.5 or later installed or python 2.4 with the python simple json
library installed
5. Ansible is an agent less configuration tool which works on ssh port (22)
6. Pushbased: Unlike chef and puppet ansible is push based . It simply executes the playbook from parent/ansible server to its clients. Where as puppet and ansible are agent based.
7. Ansible scales down: Which means you can define a single host to "n" number of hosts for configuring.



General Commands:

uptime
df -hT

Using shell module to execute mutliple commands

Inventory ::

Explain importance of /etc/hosts & dns entries

with dns 
enter the details in /etc/hosts of server 

without dns:
[local]
master ansible_ssh_host=35.176.200.8 ansible_ssh_port=22

Using userid & password for executing the scripts::

add the below to the hosts file (hosts)

ansible_ssh_user=ec2-user ansible_ssh_pass=redhat


Other Inventory Parameters:

Name                Default         Description
ansible_ssh_host    name(hosts)     hostname
ansible_ssh_port    22              Port to ssh to
ansible_ssh_user    root            user to do the ssh
ansible_ssh_pass    none            password for ssh authentication
ansible_ssh_private_
key_file            none            private key to access m/c's
ansible_connection  smart           connection to host types
ansible_shell_type  sh              shell to use for commands

* Organizing the servers under groups.
* Numbered hosts
    client1 client2 client3 (client[1:3])
    web1.example.com,web2.example.com (web[1:3].example.com)
    
    
Modules::

1. Command
2. File
3. Copy
4. Template(force=no)
5. Script
6. Debug


Variables & Groups:

Variables plays an important role in writing any code. We have many ways of creating & declaring the variables

1. Inside Playbooks via "vars:" section

2. Using vars_files

3. Using host_vars

Note: 
1.Here under hosts we are using "master" since we are delaing with host_vars part we are representing direclty our host name
2. Though you give "all" as part of the hosts, only it will display the variables which are defined for that particular host.

4. Using group_vars

5. Using Inventory File(=)

6. Built in variables
    hostvars['client']
    set_fact module : Take some output and assign the value to a variable and print the output got stored via this module on the screen.

7. Passing variables @ runtime


Groups:

We can access servers names which are declared under our inventory file using groups.

1. using groups['groupname']

Variable Precedence:

1. Highest Priority will be for 
ansible-plabook -e var=value
2. Variables defined under host_vars,group_vars,inventory_file,& YAML File
3. Facts
4. In default or main yaml of a role.

Conditions::

Using "when" for the conditions

"ansible_distribution": "Amazon",
"ansible_os_family": "RedHat"

1. ==
2. or
3. and
4. < & >
5. True, False
6. undefined, defined

Loops ::

1. with_items
2. with_fileglob
3. with_lines
4. with_dict (ansible_default_ipv4)
5. with_sequence


Facts::

1. setup & use of filter in it (ansible_architecture)

Special Cases ::

1. ignore_errors

2. local_action
3. delegate_to
4. Running one one host at a time
serial: 1 or serial: 2
"serial: 1" represents that execution is going to happen 1 by 1
If you mention that one as "serial: 2" then executioin will be 2 servers per run.

max_fail_percentage: 25
Here it represents that all the tasks will get executed @ max of 1 failure per 4 servers.

5. failed_when:

6. ansible vault

ansible-vault commands:

ansible-vault encrypt file.yml :-> Encrypts the existing file
ansible-vault decrypt file.yml :-> Decrypts the encrypted file
ansible-vault view file.yml --vault-password-file=passwd:-> helps you to view the file
ansible-vault create file.yml :-> helps you to create the new encrypted file
ansible-vault edit file.yml    :-> helps to edit the encrypted file.
ansible-playbook --vault-password-file=passwd ignore_errors.yml


Debugging Ansible Play Books ::

1. Limiting Which Hosts To Run
2. Debugging SSH Issues : (use of -vv (verbose))
3. Debug Mode

Checking Your Playbook Before Execution:

1. Syntax Check: (--syntax-check)

2. List Hosts: (--list-hosts)

3. Listing All the Tasks: (--list-tasks)

4. Check Mode: (-C)

5. Step: (--step)

6. Start-at-Task: (--start-at-task)

7. Tagging: (tags/-t)


Roles :: (Scale up your playbooks)

              

Exp:

Till now we were continously working on playbooks, just image if we have 3 environments like test,syst&prod. Where each and every environment requries certain set of 
packages. We need certain mechanism to keep all the packages as part of one umberella. In such cases we will be having one concept called "ROLES"


[root@master roles]# tree -A apache/
apache/
├── defaults
│   └── main.yml
├── files
├── handlers
│   └── main.yml
├── meta
│   └── main.yml
├── README.md
├── tasks
│   └── main.yml
├── templates
├── tests
│   ├── inventory
│   └── test.yml
└── vars
    └── main.yml

From the above we can conlude that you no need to declare the variables,tasks,hosts,templates,files,handlers seperately. For each n every term we have seperate place to declare under role.

defaults ->elps to declare the default variables
files :-> you can keep the files you want to send or use
handlers :-> Helps to define the handlers
meta :-> stores the dependent details
tasks :-> helps to write the tasks
templates :-> Helps to create the templates
vars :-> helps you to declare the variables.

include:

Helps you to execute multiple things at a time under a single file.

[root@master playbooks]# cat main.yml
---
- include: when.yml
- include: script.yml
[root@master playbooks]#


Final Project:

Install and configure Apache on all the test machines

curl http://169.254.169.254/latest/meta-data/public-ipv4 :-> Helps to fetch the public ipaddress of the instance.


Ansible Test Kitchen Setup ::

Installation Steps:

apt-get install curl
curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -
curl -sSL https://get.rvm.io | bash -s stable
source /etc/profile.d/rvm.sh
rvm requirements
rvm list known
rvm install ruby
rvm use 2.4.1 --default 
ruby --version
gem install rails
rails -v
gem install rails --version=5.1.4
wget https://packages.chef.io/files/stable/chefdk/2.0.26/el/6/chefdk-2.0.26-1.el6.x86_64.rpm
yum install chefdk-2.0.26-1.el6.x86_64.rpm -y
gem install kitchen-docker
gem install kitchen-ansible

Installing Dockers:

yum install docker -y
service docker restart
chkconfig docker on


Kitchen Environment:

Kitchen helps to do the testing on your code/cookbooks which you have developed. You can have multiple environments like centos,ubuntu,windows etc to test. 
It means that you can deploy what ever you want on vagarant or virtul machine or ec2 or dockers. You can simply use any thing and keep testing your playbook.

Understanding .yml file:

If you have observerd, each playbook/role is having one .yml file in its folder. It have many blocks and lets discuss those below

1. Driver:

---
	driver:
		name: vagrant

In the code above "driver" is responsible for creating a machine that we'll use to test our playbook. In this case we are gonna use "vagrant" for 
testing our playbook

2. provisioner:

	provisioner:
		name: chef_zero
		
provisioner is for telling test kitchen how to run ansible to apply the playbook to the instance in test

3. platforms:
	
	platforms:
		-name: centos-7.2
		
List of operating systems we want to run our infrastructure code against

4. suites:

	suites:
		-name: default
		run_list:
			-recipe[my_cookbook::default]
		attributes:
		
suites defines what to test from our playbook. It means we can define the run list of our playbooks to test on the respective machine.


Testing Test Kitchen in Ansible::

1. Go to your roles in our case (apache) folder.

2. create a file called below.

[root@slave apache]# cat test.yml
---
- hosts: all
  roles:
    - apache

3. Now create your kitchen file like below.

[root@slave apache]# cat .kitchen.yml
---
driver:
  name: docker

platforms:
  - name: centos-6.9

provisioner:
  name: ansible_playbook
  ansible_verbose: false
  ansible_verbosity: 1
  playbook: test.yml
  hosts: slave
  additional_copy_path:
    - "."

suites:
  - name: default

  
Here explain about the driver,platforms,suites & provisioner and etc ... 

4. Once you are done with the above, then run the below commands.

# kitchen create :-> helps to create the kitchen environment

# kitchen converge :-> This helps to create the virtual machine and dump the code to the virtual machine which got created.

# kitchen test :--> helps to test the entire code and the specs you have mentioned to it.

# kitchen login :-> helps to login to the kitchen test server

# kitchen destroy :-> helps to destroy the kitchen environment


Integrating Ansible with AWS ::

Basic Requirement:

# aws configure
[root@master playbooks]# aws configure
AWS Access Key ID [****************EBFA]:
AWS Secret Access Key [****************DOqF]:
Default region name [us-west-2]: eu-west-2
Default output format [json]: json


Installtin boto3

pip install boto3

Note: If anisble is not there make sure you are installing it with "pip install ansible"


Examples:

1. Creating Ec2 instance using "ec2" module

[root@master playbooks]# cat ec2-create.yml
---
- name: working with ec2 instance creation
  vars:
    - serv_count: 0
  hosts: localhost
  tasks:
    - name: creating a normal basic instance
      ec2:
           key_name: newkeys_swamy_useast1
           instance_type: t2.micro
           image: ami-97785bed
           wait: yes
           group: opentoworld
           count: "{{serv_count}}"
           vpc_subnet_id: subnet-d88cbcf4
           assign_public_ip: yes
           region: us-east-1
      register: output

    - debug: msg="{{output}}"

2. Creating a VPC with a public subnet and security groups.

---
- name: creating a vpc
  hosts: localhost
  tasks:
    - name: working with VPC creation
      ec2_vpc_net:
          name: "mytestvpc"
          cidr_block: "192.168.0.0/16"
          region: "eu-west-2"
          state: "present"
      register: myvpc

# Assigning the vpc id to a variable

    - set_fact: vpc_id="{{myvpc.vpc.id}}"
    - command: echo "{{vpc_id}}"

# Creating a public Subnet

    - name: creating a public Subnet
      ec2_vpc_subnet:
        state: "present"
        vpc_id: "{{vpc_id}}"
        cidr: "192.168.10.0/24"
        resource_tags:
          Name: "Public Subnet"

      register: my_public_subnet

# Assigning public subnet id to a variable

    - set_fact: pub_sub_id="{{my_public_subnet.subnet.id}}"

# Creating IGW for the vpc

    - name: creating the IGW
      ec2_vpc_igw:
        vpc_id: "{{vpc_id}}"
        region: "eu-west-2"
        state:  "present"
      register: my_vpc_igw

# Assigning igw id to a variable

    - set_fact: igw_id="{{my_vpc_igw.gateway_id}}"

# Creating the route table

    - name: creating our own route table
      ec2_vpc_route_table:
        vpc_id: "{{vpc_id}}"
        region: "eu-west-2"
        tags:
          Name: "public"
        subnets:
          - "{{pub_sub_id}}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{igw_id}}"


# Creating our own security group

    - name: creating our own security group
      ec2_group:
        name: "Ansible securitygroup"
        description: "Ansible SG"
        vpc_id: "{{vpc_id}}"
        region: "us-east-1"
        rules:
          - proto: "tcp"
            from_port: 0
            to_port:  65000
            cidr_ip: "0.0.0.0/0"





